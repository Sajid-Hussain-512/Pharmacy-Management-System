package designs;

import java.awt.HeadlessException;
import java.sql.Connection;
import static java.sql.DriverManager.getConnection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;

public class MedicineMasterForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form Medicine_master_form
     */
    String[] types = {"NA", "Tablet", "Capsule", "Syrup", "Lotion", "Spray"};

    Connection connection = null;

    public Connection getConnected() {

        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException classNotFoundException) {
            JOptionPane.showMessageDialog(null, classNotFoundException);
        }

        try {
            String url = "jdbc:postgresql://localhost:5432/postgres";
            String user = "postgres";
            String password = "postgres";

            connection = getConnection(url, user, password);
            // JOptionPane.showMessageDialog(null, "Connected");

        } catch (SQLException ex) {
            Logger.getLogger(MedicineMasterForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return connection;
    }

    public MedicineMasterForm() {
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        initComponents();
        getConnected();
        autoSetFields();
        saveButton.setEnabled(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        separator = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        formLabel = new javax.swing.JLabel();
        searchList = new javax.swing.JComboBox<>();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        compositionLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        composition = new javax.swing.JTextArea();
        manufacturingDateLabel = new javax.swing.JLabel();
        manufacturingDate = new com.toedter.calendar.JDateChooser();
        expiryDateLabel = new javax.swing.JLabel();
        expiryDate = new com.toedter.calendar.JDateChooser();
        priceLabel = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        reorderLabel = new javax.swing.JLabel();
        reorder = new javax.swing.JTextField();
        stocksLabel = new javax.swing.JLabel();
        stocks = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setTitle("Medicine Master Form");
        setName("medicineDetails"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1070, 640));

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        saveButton.setBackground(new java.awt.Color(204, 255, 255));
        saveButton.setFont(new java.awt.Font("Bodoni MT", 0, 18)); // NOI18N
        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(204, 255, 255));
        resetButton.setFont(new java.awt.Font("Bodoni MT", 0, 18)); // NOI18N
        resetButton.setText("RESET");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        separator.setBackground(new java.awt.Color(0, 153, 0));
        separator.setPreferredSize(new java.awt.Dimension(0, 6));

        javax.swing.GroupLayout separatorLayout = new javax.swing.GroupLayout(separator);
        separator.setLayout(separatorLayout);
        separatorLayout.setHorizontalGroup(
            separatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        separatorLayout.setVerticalGroup(
            separatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 6, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));

        formLabel.setFont(new java.awt.Font("Quicksand Medium", 1, 36)); // NOI18N
        formLabel.setForeground(new java.awt.Color(255, 255, 255));
        formLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formLabel.setText("ADD MEDICINE DETAILS");
        formLabel.setFocusable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(formLabel)
                .addGap(298, 298, 298))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(formLabel)
                .addGap(17, 17, 17))
        );

        searchList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchListItemStateChanged(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(204, 255, 255));
        updateButton.setFont(new java.awt.Font("Bodoni MT", 0, 18)); // NOI18N
        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(204, 255, 255));
        deleteButton.setFont(new java.awt.Font("Bodoni MT", 0, 18)); // NOI18N
        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));

        idLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        idLabel.setText("ID");

        id.setEditable(false);
        id.setPreferredSize(new java.awt.Dimension(265, 25));
        id.setRequestFocusEnabled(false);

        nameLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        nameLabel.setText("Name");

        name.setPreferredSize(new java.awt.Dimension(265, 25));

        compositionLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        compositionLabel.setText("Composition");

        composition.setColumns(20);
        composition.setRows(5);
        composition.setPreferredSize(new java.awt.Dimension(265, 25));
        jScrollPane2.setViewportView(composition);

        manufacturingDateLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        manufacturingDateLabel.setText("Manufacturing Date");

        manufacturingDate.setDateFormatString("dd-MM-yyyy");
        manufacturingDate.setNextFocusableComponent(expiryDate);
        manufacturingDate.setPreferredSize(new java.awt.Dimension(265, 25));

        expiryDateLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        expiryDateLabel.setText("Expiry Date");

        expiryDate.setDateFormatString("dd-MM-yyyy");
        expiryDate.setPreferredSize(new java.awt.Dimension(265, 25));

        priceLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        priceLabel.setText("Price");

        price.setPreferredSize(new java.awt.Dimension(265, 25));

        typeLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        typeLabel.setText("Type ");

        type.setModel(new javax.swing.DefaultComboBoxModel<>(types));
        type.setPreferredSize(new java.awt.Dimension(265, 25));

        reorderLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        reorderLabel.setText("Reorder At");

        reorder.setPreferredSize(new java.awt.Dimension(265, 25));

        stocksLabel.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        stocksLabel.setText("Stocks");

        stocks.setPreferredSize(new java.awt.Dimension(265, 25));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 525, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(reorderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stocksLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(typeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(expiryDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(manufacturingDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(compositionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2)
                        .addComponent(manufacturingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stocks, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                        .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(price, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(expiryDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reorder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {compositionLabel, expiryDateLabel, idLabel, manufacturingDateLabel, nameLabel, priceLabel, reorderLabel, stocksLabel, typeLabel});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 457, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(id, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(compositionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(manufacturingDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(manufacturingDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(10, 10, 10)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(expiryDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(expiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(priceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(typeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(stocksLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stocks, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(reorderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addComponent(reorder, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(24, Short.MAX_VALUE)))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {compositionLabel, expiryDateLabel, idLabel, manufacturingDateLabel, nameLabel, priceLabel, reorderLabel, stocksLabel, typeLabel});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {expiryDate, id, manufacturingDate, name, price, reorder, stocks, type});

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(separator, javax.swing.GroupLayout.DEFAULT_SIZE, 1044, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(218, 218, 218)
                                .addComponent(searchList, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 29, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(updateButton)
                                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchList, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(222, 222, 222)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        try {
            validateForm();
            String sqlQuery = "INSERT INTO medicine_master( mid, \"mname\", \"mcomposition\", \"man_date\", \"exp_date\", price, \"type\", stocks, reorder)	VALUES ( ?,?,?,?,?,?,?,?,?);";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery);

            preparedStatement.setInt(1, Integer.valueOf(id.getText()));
            preparedStatement.setString(2, name.getText());
            preparedStatement.setString(3, composition.getText());
            preparedStatement.setDate(4, new java.sql.Date(manufacturingDate.getDate().getTime()));
            preparedStatement.setDate(5, new java.sql.Date(expiryDate.getDate().getTime()));
            preparedStatement.setDouble(6, Double.parseDouble(price.getText()));
            preparedStatement.setString(7, type.getSelectedItem().toString());
            preparedStatement.setInt(8, Integer.valueOf(stocks.getText()));
            preparedStatement.setInt(9, Integer.valueOf(reorder.getText()));

            preparedStatement.executeUpdate();
            JOptionPane.showMessageDialog(null, "Added");
            reset();
        } catch (HeadlessException | NumberFormatException | SQLException exception) {
            JOptionPane.showMessageDialog(null, exception.getMessage());
        } catch (Exception exception) {
            JOptionPane.showMessageDialog(null, exception.getMessage());
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        reset();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        boolean isSelected = searchList.getSelectedIndex() > 0;
        if (isSelected) {
            try {
                int mid = Integer.parseInt(id.getText());
                validateForm();
                int confirmation = JOptionPane.showConfirmDialog(null, "Are You Sure You Want to Update?", "Warning", JOptionPane.YES_NO_CANCEL_OPTION);
                if (confirmation == JOptionPane.YES_OPTION) {
                    String query = "UPDATE medicine_master "
                            + "SET mname = ?, "
                            + "mcomposition = ?, "
                            + "man_date = ?, "
                            + "exp_date = ?, "
                            + "type = ?, "
                            + "price = ?, "
                            + "stocks = ?, "
                            + "reorder = ? "
                            + "WHERE mid = ?";
                    PreparedStatement preparedStatement = connection.prepareStatement(query);

                    preparedStatement.setString(1, name.getText());
                    preparedStatement.setString(2, composition.getText());
                    preparedStatement.setDate(3, new java.sql.Date(manufacturingDate.getDate().getTime()));
                    preparedStatement.setDate(4, new java.sql.Date(expiryDate.getDate().getTime()));
                    preparedStatement.setString(5, (String) type.getSelectedItem());
                    preparedStatement.setDouble(6, Double.parseDouble(price.getText()));
                    preparedStatement.setInt(7, Integer.valueOf(stocks.getText()));
                    preparedStatement.setInt(8, Integer.valueOf(reorder.getText()));
                    preparedStatement.setInt(9, mid);

                    int affectedRows = preparedStatement.executeUpdate();

                    if (affectedRows == 1) {
                        JOptionPane.showMessageDialog(null, "Updated A Record");
                    }
                    reset();
                }
            } catch (SQLException exception) {
                JOptionPane.showMessageDialog(null, exception.getMessage());
                // System.out.println(exception.getCause());
            } catch (Exception exception) {
                JOptionPane.showMessageDialog(null, exception.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select A Meidicine!!!");
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        boolean isSelected = searchList.getSelectedIndex() > 0;
        if (isSelected) {
            int mid = Integer.parseInt(id.getText());
            int confirmation = JOptionPane.showConfirmDialog(null, "Are You Sure You Want to Delete?", "Warning", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirmation == JOptionPane.YES_OPTION) {
                try {
                    String query = "DELETE FROM medicine_master WHERE mid = ?";
                    PreparedStatement preparedStatement = connection.prepareStatement(query);
                    preparedStatement.setInt(1, mid);

                    int affectedRows = preparedStatement.executeUpdate();

                    if (affectedRows == 1) {
                        JOptionPane.showMessageDialog(null, "Deleted A Record");

                    }
                } catch (SQLException ex) {
                    Logger.getLogger(MedicineMasterForm.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                reset();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select A Meidicine!!!");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void searchListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchListItemStateChanged
        // TODO add your handling code here:
        String mname = (String) searchList.getSelectedItem();
        try {
            Statement statement = connection.createStatement();
            String selectQuery = "SELECT * FROM medicine_master WHERE mname = \'" + mname + "\'";
            ResultSet resultSet = statement.executeQuery(selectQuery);

            while (resultSet.next()) {
                id.setText("" + resultSet.getInt("mid"));
                name.setText(resultSet.getString("mname"));
                composition.setText(resultSet.getString("mcomposition"));
                manufacturingDate.setDate(resultSet.getDate("man_date"));
                expiryDate.setDate(resultSet.getDate("exp_date"));
                price.setText("" + resultSet.getDouble("price"));
                type.setSelectedItem(resultSet.getString("type"));
                stocks.setText(resultSet.getString("stocks"));
                reorder.setText(resultSet.getString("reorder"));
            }
            saveButton.setEnabled(false);

        } catch (SQLException ex) {
            Logger.getLogger(MedicineMasterForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchListItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicineMasterForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicineMasterForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicineMasterForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicineMasterForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MedicineMasterForm().setVisible(true);
            }
        });
    }

    public void reset() {
        autoSetFields();
        name.setText("");
        composition.setText("");
        price.setText("");
        type.setSelectedIndex(0);
        stocks.setText("");
        reorder.setText("");
        searchList.setSelectedIndex(0);
        saveButton.setEnabled(true);
    }

    public void autoSetFields() {
        try {
            Statement statement = connection.createStatement();
            String selectQuery = "SELECT mid, mname FROM medicine_master ORDER BY mid";
            ResultSet resultSet = statement.executeQuery(selectQuery);

            searchList.removeAllItems();
            searchList.addItem("Search");
            int lastId = 0;

            while (resultSet.next()) {
                searchList.addItem(resultSet.getString("mname"));
                lastId = resultSet.getInt("mid");
            }
            if (lastId == 0) {
                id.setText("" + 1001);
            } else {
                id.setText("" + (lastId + 1));
            }

            manufacturingDate.setDate(new java.util.Date());
            expiryDate.setDate(new java.util.Date());

        } catch (SQLException ex) {
            Logger.getLogger(MedicineMasterForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void validateForm() throws Exception {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String today = dateFormat.format(new java.util.Date());
        String manDate = dateFormat.format(manufacturingDate.getDate());
        String expDate = dateFormat.format(expiryDate.getDate());

        if (name.getText().isBlank()) {
            throw new Exception("Enter Valid Name!!!");
        }

        if (composition.getText().isBlank()) {
            throw new Exception("Enter Valid Composition!!!");
        }

        if (manDate.compareTo(today) >= 0) {
            throw new Exception("Enter Valid Manufacturing Date!!!");
        }

        if ((expDate.compareTo(manDate) <= 0) || (expDate.compareTo(today) <= 0)) {
            throw new Exception("Enter Valid Expiry Date!!!");
        }

        if (price.getText().isBlank()) {
            throw new Exception("Enter Valid Price!!!");
        }

        if (type.getSelectedIndex() == 0) {
            throw new Exception("Enter Valid Type");
        }

        if (stocks.getText().isBlank()) {
            throw new Exception("Enter Valid Stocks!!!");
        }

        if (reorder.getText().isBlank()) {
            throw new Exception("Enter Valid Reordering Value!!!");
        }

        //        saveButton.setEnabled(
        //                !(name.getText().isEmpty()
        //                || composition.getText().isEmpty()
        //                || (manDate.compareTo(today) >= 0)
        //                || (expDate.compareTo(manDate) <= 0)
        //                || (expDate.compareTo(today) <= 0)
        //                || price.getText().isEmpty()
        //                || (type.getSelectedIndex() == 0)
        //                || stocks.getText().isEmpty()
        //                || reorder.getText().isEmpty()));
        //
        //        resetButton.setEnabled(
        //                !(name.getText().isEmpty()
        //                && composition.getText().isEmpty()
        //                && (manDate.compareTo(today) == 0)
        //                && (expDate.compareTo(today) == 0)
        //                && price.getText().isEmpty()
        //                && (type.getSelectedIndex() == 0)
        //                && stocks.getText().isEmpty()
        //                && reorder.getText().isEmpty()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea composition;
    private javax.swing.JLabel compositionLabel;
    private javax.swing.JButton deleteButton;
    private com.toedter.calendar.JDateChooser expiryDate;
    private javax.swing.JLabel expiryDateLabel;
    private javax.swing.JLabel formLabel;
    private javax.swing.JTextField id;
    private javax.swing.JLabel idLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser manufacturingDate;
    private javax.swing.JLabel manufacturingDateLabel;
    private javax.swing.JTextField name;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField price;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField reorder;
    private javax.swing.JLabel reorderLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox<String> searchList;
    private javax.swing.JPanel separator;
    private javax.swing.JTextField stocks;
    private javax.swing.JLabel stocksLabel;
    private javax.swing.JComboBox<String> type;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
